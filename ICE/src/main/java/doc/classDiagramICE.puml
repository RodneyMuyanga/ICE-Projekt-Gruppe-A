@startuml
!pragma layout smetana
'https://plantuml.com/class-diagram

class Homepage
class ShoppingCart
class Payment
class Clothing

class Jacket
class TShirt
class Boots
class Sneakers
class Pants
class Hoodies
class User

class DBConnector

Homepage o--- Clothing
Homepage o--- ManageRecycled
Homepage o-- ShoppingCart
Homepage o-- User
Homepage o-- DBConnector

ShoppingCart o-- Payment

Clothing --> TShirt
Clothing --> Jacket
Clothing --> Hoodies
Clothing ---> Pants
Clothing ---> Sneakers
Clothing ---> Boots


class Homepage{


    headerDialog()
    chooseHeaderOption()
    chooseMenClothing()
    chooseWomenClothing()
    chooseKidsClothing()
    chooseRecycledClothing()

    loginAccount()
    createAccount()
}

class Clothing {

 String name
 int ID
 float price
 float discountPrice
 int stock
 String gender
 String type
 String brand
}

class TShirt{
String size

public TShirt(String size)
super()
}

class Jacket{
String size

public Jacket(String size)
super()
}

class Hoodies{
String size

public Hoodies(String size)
super()
}

class Pants{
int size

public Pants(int size)
super()
}


class Sneakers{
int size
public Boots(int size)
super()
}

class Boots{
int size
public Boots(int size)
super()
}


class ShoppingCart {
    ArrayList<Clothing> itemsInCart
    float sum

    removeItem()
    addItem()
}

class User {
    int id
    String username
    String password
    String email
    String address
    int regNr
    int accountNr

    public User(String username, String password, String email, String address, int regNr, int accountNr)
    public User(String username, String password, String email)

    dbConnector(userSaleList)
    sell()
}


class Payment {

    paymentId
    amount


    paymentDialog()
    if logged in, no detials needed()
    else if not logged in, provide details()
    displayCart()
    printReciept()
    removeStock()
}

class ManageRecycled {
    sellingDialog()
    registerClothing()
    paymentCalculator()
}

class DBConnector {
    ArrayList<Clothing> clothesRecycled
    ArrayList<User> userSaleList
    ArrayList<Clothing> clothes

    readClothingData()
    saveRecycledData()
    readUserData()
    saveUserData()


    getClothesRecycled()
    getUserSaleList()
    getClothes()


}

@enduml